package com.rbank.olb.retail.services.accountsummary;

import java.net.URI;
import java.util.List;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.cloud.sleuth.sampler.AlwaysSampler;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.rbank.domain.retail.model.Account;
import com.rbank.domain.retail.model.Customer;
import com.rbank.olb.retail.model.AccountSummary;

@RestController
@Service
public class AccountSummaryService {
	
	private static final Logger LOG = Logger.getLogger(AccountSummaryService.class.getName());
	
	@Bean
	private RestTemplate getRestTemplate() {
		return new RestTemplate();
	}
	
	@Autowired
	private RestTemplate restTemplate;
	
	
	@Autowired
	private LoadBalancerClient loadBalancerClient;

	@Bean
	public AlwaysSampler defaultSampler() {
	  return new AlwaysSampler();
	}
	
	@RequestMapping("/accountsummary")
	public AccountSummary getAccountSummary(@RequestParam(value="custId" , defaultValue="100") String custId) {
//		//return "Message from AccountListService : " + id;
//		 RestTemplate restTemplate = new RestTemplate();
//		 String url = "http://localhost:8081/accounts?id=" + accountId;
//		 URI uri = URI.create(url);
//		 return restTemplate.getForObject(uri, String.class);
		LOG.info("******************  In AccountService.getAccountSummary() presentation tier begin *******");
		AccountSummary accountSummary = new AccountSummary();
		/*AccountSummaryUtil accountSummaryUtil =  new AccountSummaryUtil(restTemplate, loadBalancerClient);
		accountSummary.setCustomer(accountSummaryUtil.getCustomer(custId));
		accountSummary.setAccounts(accountSummaryUtil.getAccounts(custId));*/
		accountSummary.setCustomer(getCustomer(custId));
		accountSummary.setAccounts(getAccounts(custId));
		LOG.info("******************  In AccountService.getAccountSummary() presentation tier end *******");
		return accountSummary;
	}
	public Customer getCustomer(String custId) {
		LOG.info("********** getCustomer *********** begin ");
		String customerDomainServiceName = "retail-customer";
		ServiceInstance serviceInstance = loadBalancerClient.choose(customerDomainServiceName);
		System.out.println("URL1 : ");
		String baseUrl = serviceInstance.getUri().toString();
		String url = baseUrl + "/retailcustomers/" + custId;
		System.out.println("URL : " + url);
		URI uri = URI.create(url);
		LOG.info("********** getCustomer *********** end ");
		return this.restTemplate.getForObject(uri, Customer.class);
	}

	@HystrixCommand(fallbackMethod = "getAccountsFallbackMethod")
	public List<Account> getAccounts(String custId) {
		LOG.info(" ----------- in AccountSummaryUtil.getAccounts() ---------------------");
		String customerAccountsDomainServiceName = "retail-customeraccount";
		ServiceInstance serviceInstance = loadBalancerClient.choose(customerAccountsDomainServiceName);
		String baseUrl = serviceInstance.getUri().toString();
		String url = baseUrl + "/retailcustomers/" + custId + "/accounts";
		LOG.info("URL : " + url);
		URI uri = URI.create(url);
		LOG.info(" ----------- in AccountSummaryUtil.getAccounts() ---------------------");
		return this.restTemplate.getForObject(uri, List.class);
	}

}
